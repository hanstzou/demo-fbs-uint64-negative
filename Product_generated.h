// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PRODUCT_H_
#define FLATBUFFERS_GENERATED_PRODUCT_H_

#include "flatbuffers/flatbuffers.h"

struct Product;
struct ProductBuilder;

struct Product FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProductBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_U32 = 4,
    VT_U64 = 6
  };
  uint32_t U32() const {
    return GetField<uint32_t>(VT_U32, 0);
  }
  uint64_t U64() const {
    return GetField<uint64_t>(VT_U64, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_U32) &&
           VerifyField<uint64_t>(verifier, VT_U64) &&
           verifier.EndTable();
  }
};

struct ProductBuilder {
  typedef Product Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_U32(uint32_t U32) {
    fbb_.AddElement<uint32_t>(Product::VT_U32, U32, 0);
  }
  void add_U64(uint64_t U64) {
    fbb_.AddElement<uint64_t>(Product::VT_U64, U64, 0);
  }
  explicit ProductBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProductBuilder &operator=(const ProductBuilder &);
  flatbuffers::Offset<Product> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Product>(end);
    return o;
  }
};

inline flatbuffers::Offset<Product> CreateProduct(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t U32 = 0,
    uint64_t U64 = 0) {
  ProductBuilder builder_(_fbb);
  builder_.add_U64(U64);
  builder_.add_U32(U32);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_PRODUCT_H_

